package RISK.Test;

import RISK.ClassBuilder.ClassBuilderJSON;
import RISK.CombatResolver.CombatResolver;
import RISK.CombatResolver.DiceCombatResolver;
import RISK.Factory.NtopFactory;
import RISK.Factory.NtopFactoryJSON;
import RISK.Factory.PtonFactory;
import RISK.Factory.PtonFactoryJSON;
import RISK.Game.GameServerJSON;
import org.json.JSONObject;

import java.io.IOException;

public class TestServer {
    public static void main(String[] args) {
        GameServerJSON server = testServerSetUp();
        testServerAcceptConnections(server);
        while (server.getGameState() == 0) { // game still runs
            testServerAcceptOrders(server);
            testServerResolveCombats(server);
        }
        System.out.println("Server finishes game");
    }

    public static GameServerJSON testServerSetUp() {
        try {
            NtopFactoryJSON ntopFactory = new NtopFactoryJSON();
            ClassBuilderJSON classBuilder = new ClassBuilderJSON(ntopFactory);
            GameServerJSON serverJSON = new GameServerJSON(8000, classBuilder,
                    "./src/RISK/territoriesJSON.txt",
                    "./src/RISK/playersJSON.txt",
                    "./src/RISK/armiesJSON.txt");
            return serverJSON;
        } catch (Exception e) {
        }
        return null;
    }

    public static void testServerAcceptConnections(GameServerJSON server) {
        try {
            PtonFactory<JSONObject> ptonFactory = new PtonFactoryJSON();
            server.acceptConnections(ptonFactory);
        } catch (IOException e) {
            System.out.println("Server failed to accept connections");
        }
    }

    public static void testServerAcceptOrders(GameServerJSON server) {
        try {
            NtopFactory<JSONObject> ntopFactory = new NtopFactoryJSON();
            server.acceptOrders(ntopFactory);
        } catch (IOException e) {
            System.out.println("Server failed to accept connections");
        }
    }

    public static void testServerResolveCombats(GameServerJSON server) {
        try {
            CombatResolver combatResolver = new DiceCombatResolver(20);
            PtonFactory<JSONObject> ptonFactory = new PtonFactoryJSON();
            server.resolveCombats(combatResolver, ptonFactory);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }




}
